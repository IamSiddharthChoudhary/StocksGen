{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/app/api/history/route.js"],"sourcesContent":["// import { NextResponse } from \"next/server\";\n// import yahooFinance from \"yahoo-finance2\";\n\n// function formatValue(value) {\n//   if (value === 0) return \"0\";\n//   if (Math.abs(value) >= 1e9) {\n//     return (value / 1e9).toFixed(2) + \"B\";\n//   } else if (Math.abs(value) >= 1e6) {\n//     return (value / 1e6).toFixed(2) + \"M\";\n//   } else {\n//     return value.toFixed(2);\n//   }\n// }\n\n// export async function POST(req) {\n//   try {\n//     const { symbol } = await req.json();\n\n//     if (!symbol) {\n//       return NextResponse.json(\n//         { error: \"Stock symbol is required\" },\n//         { status: 400 }\n//       );\n//     }\n\n//     const financials = await yahooFinance.quoteSummary(symbol, {\n//       modules: [\n//         \"financialData\",\n//         \"incomeStatementHistory\",\n//         \"defaultKeyStatistics\",\n//       ],\n//     });\n\n//     const incomeStatements =\n//       financials.incomeStatementHistory?.incomeStatementHistory || [];\n//     const financialData = financials.financialData || {};\n//     const keyStats = financials.defaultKeyStatistics || {};\n\n//     if (incomeStatements.length === 0) {\n//       return NextResponse.json(\n//         { error: \"Financial data not available\" },\n//         { status: 404 }\n//       );\n//     }\n\n//     const name = keyStats.longName || \"N/A\";\n\n//     const years = [2023, 2022, 2021, 2024];\n//     const stockData = {\n//       name,\n//       ticker: symbol,\n//     };\n\n//     for (const year of years) {\n//       const statement = incomeStatements.find(\n//         (entry) => new Date(entry.endDate).getFullYear() === year\n//       );\n\n//       if (statement) {\n//         const yearSuffix = year.toString().slice(2);\n//         stockData[`revenue${yearSuffix}`] = formatValue(\n//           statement.totalRevenue || 0\n//         );\n//         stockData[`ebit${yearSuffix}`] = formatValue(\n//           (statement.totalRevenue || 0) -\n//             (statement.totalOperatingExpenses || 0)\n//         );\n//         stockData[`netProfit${yearSuffix}`] = formatValue(\n//           statement.netIncome || 0\n//         );\n//         stockData[`ebitda${yearSuffix}`] = formatValue(\n//           financialData.ebitda || 0\n//         );\n//         stockData[`roi${yearSuffix}`] =\n//           ((financialData.returnOnEquity || 0) * 100).toFixed(2) + \"%\";\n//       }\n//     }\n\n//     Object.keys(stockData).forEach((key) => {\n//       if (stockData[key] === undefined) {\n//         stockData[key] = \"N/A\";\n//       }\n//     });\n\n//     return NextResponse.json(stockData);\n//   } catch (error) {\n//     console.error(\"Error fetching stock data:\", error);\n//     return NextResponse.json(\n//       { error: \"Failed to fetch stock data\" },\n//       { status: 500 }\n//     );\n//   }\n// }\n"],"names":[],"mappings":"AAAA,8CAA8C;AAC9C,6CAA6C;AAE7C,gCAAgC;AAChC,iCAAiC;AACjC,kCAAkC;AAClC,6CAA6C;AAC7C,yCAAyC;AACzC,6CAA6C;AAC7C,aAAa;AACb,+BAA+B;AAC/B,MAAM;AACN,IAAI;AAEJ,oCAAoC;AACpC,UAAU;AACV,2CAA2C;AAE3C,qBAAqB;AACrB,kCAAkC;AAClC,iDAAiD;AACjD,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,mEAAmE;AACnE,mBAAmB;AACnB,2BAA2B;AAC3B,oCAAoC;AACpC,kCAAkC;AAClC,WAAW;AACX,UAAU;AAEV,+BAA+B;AAC/B,yEAAyE;AACzE,4DAA4D;AAC5D,8DAA8D;AAE9D,2CAA2C;AAC3C,kCAAkC;AAClC,qDAAqD;AACrD,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,+CAA+C;AAE/C,8CAA8C;AAC9C,0BAA0B;AAC1B,cAAc;AACd,wBAAwB;AACxB,SAAS;AAET,kCAAkC;AAClC,iDAAiD;AACjD,oEAAoE;AACpE,WAAW;AAEX,yBAAyB;AACzB,uDAAuD;AACvD,2DAA2D;AAC3D,wCAAwC;AACxC,aAAa;AACb,wDAAwD;AACxD,4CAA4C;AAC5C,sDAAsD;AACtD,aAAa;AACb,6DAA6D;AAC7D,qCAAqC;AACrC,aAAa;AACb,0DAA0D;AAC1D,sCAAsC;AACtC,aAAa;AACb,0CAA0C;AAC1C,0EAA0E;AAC1E,UAAU;AACV,QAAQ;AAER,gDAAgD;AAChD,4CAA4C;AAC5C,kCAAkC;AAClC,UAAU;AACV,UAAU;AAEV,2CAA2C;AAC3C,sBAAsB;AACtB,0DAA0D;AAC1D,gCAAgC;AAChC,iDAAiD;AACjD,wBAAwB;AACxB,SAAS;AACT,MAAM;AACN,IAAI"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}