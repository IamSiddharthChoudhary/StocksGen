{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/app/api/financial/route.js"],"sourcesContent":["import { exec } from \"child_process\";\nimport path from \"path\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET(req) {\n  const { searchParams } = new URL(req.url);\n  const ticker = searchParams.get(\"ticker\");\n\n  if (!ticker) {\n    return NextResponse.json(\n      { error: \"Ticker symbol is required\" },\n      { status: 400 }\n    );\n  }\n\n  const scriptPath = path.join(\n    process.cwd(),\n    \"src\",\n    \"app\",\n    \"scripts\",\n    \"financial_table.py\"\n  );\n\n  return new Promise((resolve) => {\n    exec(`python3 \"${scriptPath}\" \"${ticker}\"`, (error, stdout, stderr) => {\n      console.log(\"STDOUT:\", stdout); // Log script output\n      console.log(\"STDERR:\", stderr); // Log errors, if any\n\n      if (error) {\n        console.error(\"Execution error:\", error);\n        return resolve(\n          NextResponse.json(\n            { error: stderr || \"Failed to fetch financial data\" },\n            { status: 500 }\n          )\n        );\n      }\n\n      try {\n        const trimmedOutput = stdout.trim();\n        const data = JSON.parse(trimmedOutput);\n\n        const historydata = {};\n\n        for (let a in data) {\n          for (let b in data[a]) {\n            if (data[a][b].toString().indexOf(\"%\") === -1) {\n              if (b == \"Net Profit\") {\n                historydata[`netProfit${a.slice(2)}`] = `${roundOffNumber(\n                  data[a][b]\n                )}`;\n                continue;\n              }\n              historydata[\n                `${b.toLowerCase()}${a.slice(2)}`\n              ] = `${roundOffNumber(data[a][b])}`;\n            } else\n              historydata[`${b.toLowerCase()}${a.slice(2)}`] = `${data[a][b]}`;\n          }\n        }\n\n        resolve(NextResponse.json(historydata, { status: 200 }));\n      } catch (e) {\n        console.error(\"JSON Parse Error:\", e.message);\n        console.error(\"Raw output:\", stdout);\n        resolve(\n          NextResponse.json({ error: \"Invalid JSON response\" }, { status: 500 })\n        );\n      }\n    });\n  });\n}\n\nfunction roundOffNumber(num) {\n  let rounded = Math.round((num / 1000) * 10) / 10;\n  return rounded % 1 === 0 ? rounded.toFixed(1) : rounded;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,GAAG;IAC3B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,SAAS,aAAa,GAAG,CAAC;IAEhC,IAAI,CAAC,QAAQ;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;IAEA,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAC1B,QAAQ,GAAG,IACX,OACA,OACA,WACA;IAGF,OAAO,IAAI,QAAQ,CAAC;QAClB,CAAA,GAAA,mHAAA,CAAA,OAAI,AAAD,EAAE,CAAC,SAAS,EAAE,WAAW,GAAG,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,QAAQ;YAC1D,QAAQ,GAAG,CAAC,WAAW,SAAS,oBAAoB;YACpD,QAAQ,GAAG,CAAC,WAAW,SAAS,qBAAqB;YAErD,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,oBAAoB;gBAClC,OAAO,QACL,gIAAA,CAAA,eAAY,CAAC,IAAI,CACf;oBAAE,OAAO,UAAU;gBAAiC,GACpD;oBAAE,QAAQ;gBAAI;YAGpB;YAEA,IAAI;gBACF,MAAM,gBAAgB,OAAO,IAAI;gBACjC,MAAM,OAAO,KAAK,KAAK,CAAC;gBAExB,MAAM,cAAc,CAAC;gBAErB,IAAK,IAAI,KAAK,KAAM;oBAClB,IAAK,IAAI,KAAK,IAAI,CAAC,EAAE,CAAE;wBACrB,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG;4BAC7C,IAAI,KAAK,cAAc;gCACrB,WAAW,CAAC,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,eACzC,IAAI,CAAC,EAAE,CAAC,EAAE,GACT;gCACH;4BACF;4BACA,WAAW,CACT,GAAG,EAAE,WAAW,KAAK,EAAE,KAAK,CAAC,IAAI,CAClC,GAAG,GAAG,eAAe,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG;wBACrC,OACE,WAAW,CAAC,GAAG,EAAE,WAAW,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpE;gBACF;gBAEA,QAAQ,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;oBAAE,QAAQ;gBAAI;YACvD,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,qBAAqB,EAAE,OAAO;gBAC5C,QAAQ,KAAK,CAAC,eAAe;gBAC7B,QACE,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAwB,GAAG;oBAAE,QAAQ;gBAAI;YAExE;QACF;IACF;AACF;AAEA,SAAS,eAAe,GAAG;IACzB,IAAI,UAAU,KAAK,KAAK,CAAC,AAAC,MAAM,OAAQ,MAAM;IAC9C,OAAO,UAAU,MAAM,IAAI,QAAQ,OAAO,CAAC,KAAK;AAClD"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}