{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/fancy-dark-loading.tsx"],"sourcesContent":["\"use client\";\n\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Component() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black text-white\">\n      <div className=\"w-64 text-center\">\n        <div className=\"relative\">\n          <Loader2\n            className=\"w-24 h-24 animate-spin text-blue-500 mx-auto mb-4\"\n            aria-hidden=\"true\"\n          />\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-2xl font-bold text-blue-300\">\n              {/* {Math.round(progress)}% */}\n            </div>\n          </div>\n        </div>\n        <h1 className=\"text-3xl font-bold mb-2 text-blue-300\">Loading...</h1>\n        <p className=\"text-gray-400 mb-4\">\n          Preparing your presentation, This may take a while\n        </p>\n        {/* <Progress value={progress} className=\"w-full h-2 bg-gray-700\" /> */}\n        <style jsx>{`\n          .progress-indicator {\n            background-color: #8b5cf6;\n          }\n        `}</style>\n        <div className=\"mt-8 space-y-2\">\n          <div className=\"h-2 w-full bg-black rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-pink-500 rounded-full animate-pulse\"\n              style={{ width: \"75%\" }}\n            ></div>\n          </div>\n          <div className=\"h-2 w-full bg-gray-800 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-purple-500 rounded-full animate-pulse\"\n              style={{ width: \"55%\", animationDelay: \"0.2s\" }}\n            ></div>\n          </div>\n          <div className=\"h-2 w-full bg-gray-800 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-blue-500 rounded-full animate-pulse\"\n              style={{ width: \"90%\", animationDelay: \"0.4s\" }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;;AAIe,SAAS;IACtB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;sDAAc;;8BACb,6LAAC;8DAAc;;sCACb,6LAAC,oNAAA,CAAA,UAAO;4BACN,WAAU;4BACV,eAAY;;;;;;sCAEd,6LAAC;sEAAc;sCACb,cAAA,6LAAC;0EAAc;;;;;;;;;;;;;;;;;8BAKnB,6LAAC;8DAAa;8BAAwC;;;;;;8BACtD,6LAAC;8DAAY;8BAAqB;;;;;;;;;;8BASlC,6LAAC;8DAAc;;sCACb,6LAAC;sEAAc;sCACb,cAAA,6LAAC;gCAEC,OAAO;oCAAE,OAAO;gCAAM;0EADZ;;;;;;;;;;;sCAId,6LAAC;sEAAc;sCACb,cAAA,6LAAC;gCAEC,OAAO;oCAAE,OAAO;oCAAO,gBAAgB;gCAAO;0EADpC;;;;;;;;;;;sCAId,6LAAC;sEAAc;sCACb,cAAA,6LAAC;gCAEC,OAAO;oCAAE,OAAO;oCAAO,gBAAgB;gCAAO;0EADpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQxB;KAhDwB"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,8JAAM,UAAU,MAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,8JAAM,UAAU,OAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,8JAAM,UAAU,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,8JAAM,UAAU,OAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,8JAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,8JAAM,UAAU,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/editableTest.tsx"],"sourcesContent":["import { X } from \"lucide-react\";\nimport type React from \"react\";\nimport {\n  useState,\n  useEffect,\n  useRef,\n  type SetStateAction,\n  type Dispatch,\n} from \"react\";\n\ninterface EditableTextProps {\n  initialText: string;\n  onSave: (text: string, image?: File) => void;\n  className?: string;\n  mitigation?: boolean;\n  hasChanged: boolean;\n  count?: number;\n  setCount?: Dispatch<SetStateAction<number>>;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n}\n\nexport function EditableText({\n  initialText,\n  hasChanged,\n  setHasChanged,\n  mitigation = false,\n  count,\n  setCount,\n  onSave,\n  className = \"\",\n}: EditableTextProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [text, setText] = useState(initialText);\n  const [pastedImage, setPastedImage] = useState<File | null>(null);\n  const textRef = useRef<HTMLDivElement>(null);\n  const cursorPositionRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (isEditing && textRef.current) {\n      textRef.current.focus();\n      if (cursorPositionRef.current !== null) {\n        const range = document.createRange();\n        const sel = window.getSelection();\n        if (textRef.current.childNodes.length > 0) {\n          range.setStart(\n            textRef.current.childNodes[0] || textRef.current,\n            Math.min(\n              cursorPositionRef.current,\n              textRef.current.textContent?.length || 0\n            )\n          );\n        } else {\n          range.setStart(textRef.current, 0);\n        }\n        range.collapse(true);\n        console.log(range);\n        sel?.removeAllRanges();\n        sel?.addRange(range);\n      }\n    }\n  }, [isEditing, text]);\n\n  const handleBlur = () => {\n    setIsEditing(false);\n    if (hasChanged) {\n      onSave(text);\n      setHasChanged(false);\n    }\n  };\n\n  const handleInput = (e: React.FormEvent<HTMLDivElement>) => {\n    const newText = e.currentTarget.textContent || \"\";\n    if (newText !== initialText) {\n      setHasChanged(true);\n    } else {\n      setHasChanged(false);\n    }\n    setText(newText);\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      cursorPositionRef.current = range.startOffset;\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n    const items = e.clipboardData.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].type.indexOf(\"image\") !== -1) {\n        e.preventDefault();\n        const file = items[i].getAsFile();\n        if (file) {\n          setPastedImage(file);\n          setHasChanged(true);\n        }\n        break;\n      }\n    }\n\n    if (count && setCount) {\n      setText(text + `$#${count}`);\n      setCount(count + 1);\n    }\n  };\n\n  const handleSave = () => {\n    onSave(text, pastedImage || undefined);\n  };\n\n  const handleCut = () => {\n    setPastedImage(null);\n  };\n\n  return (\n    <div className=\"relative\">\n      <div\n        ref={textRef}\n        className={`${className} ${\n          isEditing ? \"border border-blue-500 rounded\" : \"\"\n        }`}\n        contentEditable={isEditing}\n        onBlur={handleSave}\n        onClick={() => setIsEditing(true)}\n        onInput={handleInput}\n        onPaste={handlePaste}\n        suppressContentEditableWarning={true}\n      >\n        {mitigation && (\n          <span className=\"font-bold text-white\">Mitigation: </span>\n        )}\n        {text}\n      </div>\n      {pastedImage && (\n        <div className=\"mt-2\">\n          <button\n            className=\"absolute right-0 bg-slate-900 rounded-full p-1 bg-opacity-50 m-1\"\n            onClick={handleCut}\n          >\n            <X />\n          </button>\n          <img\n            src={URL.createObjectURL(pastedImage) || \"/placeholder.svg\"}\n            alt=\"Pasted image\"\n            className=\"max-w-full h-auto\"\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/lib/supaBaseClient.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nexport function createSupabaseClient() {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n  let client: any;\n\n  if (key && url) client = createClient(url, key);\n\n  return client;\n}\n"],"names":[],"mappings":";;;AAGc;AAHd;;AAEO,SAAS;IACd,MAAM;IACN,MAAM;IACN,IAAI;IAEJ,wCAAgB,SAAS,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,KAAK;IAE3C,OAAO;AACT"}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/ui/loader.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface Loader2Props extends React.SVGProps<SVGSVGElement> {\n  size?: number;\n}\n\nexport const Loader2 = ({ size = 24, className, ...props }: Loader2Props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={`animate-spin ${className}`}\n      {...props}\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n    </svg>\n  );\n};\n"],"names":[],"mappings":";;;;;AAMO,MAAM,UAAU,CAAC,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,GAAG,OAAqB;IACtE,qBACE,6LAAC;QACC,OAAM;QACN,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAW,CAAC,aAAa,EAAE,WAAW;QACrC,GAAG,KAAK;kBAET,cAAA,6LAAC;YAAK,GAAE;;;;;;;;;;;AAGd;KAlBa"}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 511, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/ui/saveButton.tsx"],"sourcesContent":["\"use client\";\n\nimport { Save } from \"lucide-react\";\n\ninterface SaveButtonProps {\n  onClick: () => void;\n}\n\nexport default function SaveButton({ onClick }: SaveButtonProps) {\n  return (\n    <div className=\"fixed top-24 right-5\">\n      <button\n        className=\"text-white  bg-black transition-all duration-300 hover:scale-110 active:scale-90 p-4 rounded-full shadow-md  shadow-cyan-400\"\n        aria-label=\"Share\"\n        onClick={() => {\n          onClick();\n        }}\n      >\n        <Save className=\"text-white w-6 h-6\" />\n      </button>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,WAAW,EAAE,OAAO,EAAmB;IAC7D,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,WAAU;YACV,cAAW;YACX,SAAS;gBACP;YACF;sBAEA,cAAA,6LAAC,qMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;;;;;;;;;;;AAIxB;KAdwB"}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 558, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/ui/refreshButton.tsx"],"sourcesContent":["\"use client\";\n\nimport { RotateCw } from \"lucide-react\";\n\ninterface SaveButtonProps {\n  onClick: () => void;\n}\n\nexport default function Refresh({ onClick }: SaveButtonProps) {\n  return (\n    <div className=\"fixed top-5 left-5\">\n      <button\n        className=\"text-white  bg-black transition-all duration-300 hover:scale-110 active:scale-90 p-4 rounded-full shadow-md  shadow-cyan-400\"\n        aria-label=\"Share\"\n        onClick={() => {\n          onClick();\n        }}\n      >\n        <RotateCw className=\"text-white w-6 h-6\" />\n      </button>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAQe,SAAS,QAAQ,EAAE,OAAO,EAAmB;IAC1D,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,WAAU;YACV,cAAW;YACX,SAAS;gBACP;YACF;sBAEA,cAAA,6LAAC,iNAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI5B;KAdwB"}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/EditableStockData.tsx"],"sourcesContent":["\"use client\";\nimport type React from \"react\";\nimport {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  type SetStateAction,\n  type Dispatch,\n} from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type {\n  EditedValType,\n  TableType,\n  StockHistory,\n} from \"../app/types/StockData\";\nimport {\n  Banknote,\n  BarChart2,\n  Check,\n  Coins,\n  Copy,\n  Divide,\n  Landmark,\n  Link,\n  Percent,\n  Scale,\n  Share,\n  Star,\n  TrendingUp,\n  User,\n  Users,\n} from \"lucide-react\";\nimport { EditableText } from \"./editableTest\";\nimport type { SupabaseClient } from \"@supabase/supabase-js\";\nimport { createSupabaseClient } from \"@/lib/supaBaseClient\";\nimport { Loader2 } from \"@/components/ui/loader\";\nimport SaveButton from \"./ui/saveButton\";\nimport Refresh from \"./ui/refreshButton\";\nimport { useRouter } from \"next/navigation\";\n\ninterface StockDataDisplayProps {\n  data: TableType;\n  id: string;\n  userId: string;\n}\n\ninterface Strength {\n  title: string;\n  description: string;\n}\n\nexport function StockDataDisplay({ data, id, userId }: StockDataDisplayProps) {\n  const [calls, setCalls] = useState(0);\n  const [client, setClient] = useState<SupabaseClient | null>(null);\n  const [dataSave, setDataSave] = useState<TableType>();\n  const [isSaving, setIsSaving] = useState(false);\n  const [cachedData, setCachedData] = useState<TableType | null>(null);\n  const [editedVals, setEditedVals] = useState<EditedValType>({});\n  const [companyDescription, setCompanyDescription] = useState<string>(\"\");\n  const [hasChanged, setHasChanged] = useState(false);\n  const [count, setCount] = useState(0);\n  const router = useRouter();\n  const [imageSrc, setImageSrc] = useState<string>(\n    \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  );\n  const [imageSrc2, setImageSrc2] = useState<string>(\n    \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  );\n  const [keyMetrics, setKeyMetrics] = useState<\n    Array<{\n      label: string;\n      value: string | number;\n      description: string;\n      name: string;\n    }>\n  >([]);\n  const [financialHealth, setFinancialHealth] = useState<\n    Array<{\n      label: string;\n      value: string | number;\n      description: string;\n      name: string;\n    }>\n  >([]);\n  const [strengthsAndCatalysts, setStrengthsAndCatalysts] = useState<\n    Strength[]\n  >([]);\n  const [analystHealth, setAnalystHealth] = useState<\n    Array<{\n      label: string;\n      value: string | number;\n      description: string;\n      name: string;\n    }>\n  >([]);\n  const [risksAndMitigations, setRisksAndMitigations] = useState<Strength[]>(\n    []\n  );\n  const [conclusion, setConclusion] = useState<string>(\"\");\n  const [loadingStates, setLoadingStates] = useState({\n    companyOverview: true,\n    keyMetrics: true,\n    financialHealth: true,\n    strengthsAndCatalysts: true,\n    analystHealth: true,\n    risksAndMitigations: true,\n    conclusion: true,\n    history: true,\n  });\n  const [history, setHistory] = useState<StockHistory | null>(null);\n\n  useEffect(() => {\n    setClient(createSupabaseClient());\n  }, []);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     defaultSave();\n  //   }, 2000);\n  // }, [conclusion, data, id, client, companyDescription]);\n\n  useEffect(() => {\n    // const divRate = await fetch(\n    //   `https://api.nasdaq.com/api/quote/${id}/dividends?assetclass=stocks`\n    // );\n\n    if (!cachedData) {\n      setCachedData(data);\n    }\n  }, [data, cachedData]);\n\n  useEffect(() => {\n    if (cachedData) {\n      const newData: TableType = {\n        ...cachedData,\n        risksAndMitigation: parsePointsToString(risksAndMitigations),\n      };\n      setDataSave(cachedData);\n    }\n  }, [cachedData]);\n\n  const fetchCompanyOverview = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: companyData, error } = await client\n          .from(\"company\")\n          .select(\"description\")\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!companyData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\"description\")\n            .eq(\"name\", data.name)\n            .single();\n\n          companyData = defaultData;\n        }\n\n        if (companyData && companyData.description) {\n          setCompanyDescription(companyData.description);\n        } else {\n          const desc = await dsc(\n            `Give ${cachedData.name} company's description in 50-70 words`\n          );\n          setCompanyDescription(desc);\n        }\n        setImageSrc(cachedData.url1 || \"\");\n      } catch (error) {\n        console.error(\"Error fetching company overview:\", error);\n        const desc = await dsc(\n          `Give ${cachedData.name} company's description in 50-70 words`\n        );\n        setCompanyDescription(desc);\n        setImageSrc(cachedData.url1 || \"\");\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, companyOverview: false }));\n      }\n    }\n  }, [cachedData, client, id]);\n\n  const fetchKeyMetrics = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: metricsData, error } = await client\n          .from(\"company\")\n          .select(\n            \"marketCap,marketCapDsc,sharesOutstanding,sharesOutstandingDsc,float,floatDsc,evEbitda,evEbitdaDsc,peTtm,peTtmDsc,dividendRate,dividendRateDsc\"\n          )\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!metricsData) {\n          const { data: defalutData, error } = await client\n            .from(\"company\")\n            .select(\n              \"marketCap,marketCapDsc,sharesOutstanding,sharesOutstandingDsc,float,floatDsc,evEbitda,evEbitdaDsc,peTtm,peTtmDsc,dividendRate,dividendRateDsc\"\n            )\n            .eq(\"name\", data.name)\n            .single();\n\n          metricsData = defalutData;\n        }\n\n        const metricsWithDescriptions = [\n          {\n            label: \"Market Cap\",\n            value:\n              \"$\" +\n              roundAndConvert(metricsData?.marketCap || cachedData.marketCap),\n            name: \"marketCap\",\n            description: metricsData?.marketCapDsc,\n          },\n          {\n            label: \"Shares Outstanding\",\n            value:\n              \"$\" +\n              roundAndConvert(\n                metricsData?.sharesOutstanding || cachedData.sharesOutstanding\n              ),\n            name: \"sharesOutstanding\",\n            description: metricsData?.sharesOutstandingDsc,\n          },\n          {\n            label: \"Shares Float\",\n            value:\n              \"$\" + roundAndConvert(metricsData?.float || cachedData.float),\n            name: \"float\",\n            description: metricsData?.floatDsc,\n          },\n          {\n            label: \"EV/EBITDA\",\n            value: (metricsData?.evEbitda || cachedData.evEbitda) + \"x\",\n            name: \"evEbitda\",\n            description: metricsData?.evEbitdaDsc,\n          },\n          {\n            label: \"P/E\",\n            value: (metricsData?.peTtm || cachedData.peTtm) + \"x\",\n            name: \"peTtm\",\n            description: metricsData?.peTtmDsc,\n          },\n          {\n            label: \"Dividend Rate\",\n            value: cachedData.dividendRate + \"x\",\n            name: \"dividendRate\",\n            description: metricsData?.dividendRateDsc,\n          },\n        ];\n\n        const updatedMetrics = await Promise.all(\n          metricsWithDescriptions.map(async (metric) => {\n            let description = metric.description || data[metric.name + \"Dsc\"];\n            if (!description) {\n              const a = await dsc(\n                `Summarize ${metric.label} of ${cachedData.name} in less than 20 words without specifying numbers.`\n              );\n              data[metric.name + \"Dsc\"] = a;\n              description = a;\n            }\n\n            return {\n              ...metric,\n              description,\n            };\n          })\n        );\n\n        // console.log(updatedMetrics);\n        setKeyMetrics(updatedMetrics);\n      } catch (error) {\n        console.error(\"Error fetching key metrics:\", error);\n        setKeyMetrics([]);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, keyMetrics: false }));\n      }\n    }\n  }, [cachedData, client]);\n\n  const fetchFinancialHealth = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: financialData, error } = await client\n          .from(\"company\")\n          .select(\n            \"cashPosition,cashPositionDsc,totalDebt,totalDebtDsc,debtToEquity,debtToEquityDsc,currentRatio,currentRatioDsc\"\n          )\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!financialData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\n              \"cashPosition,cashPositionDsc,totalDebt,totalDebtDsc,debtToEquity,debtToEquityDsc,currentRatio,currentRatioDsc\"\n            )\n            .eq(\"name\", data.name)\n            .single();\n          financialData = defaultData;\n        }\n\n        const financialsData = [\n          {\n            label: \"Cash Position\",\n            value:\n              \"$\" +\n              roundAndConvert(\n                financialData?.cashPosition || cachedData.cashPosition\n              ),\n            name: \"cashPosition\",\n            description: financialData?.cashPositionDsc,\n          },\n          {\n            label: \"Total Debt\",\n            value:\n              \"$\" +\n              roundAndConvert(financialData?.totalDebt || cachedData.totalDebt),\n            name: \"totalDebt\",\n            description: financialData?.totalDebtDsc,\n          },\n          {\n            label: \"Debt to Equity\",\n            value:\n              (financialData?.debtToEquity || cachedData.debtToEquity) + \"x\",\n            name: \"debtToEquity\",\n            description: financialData?.debtToEquityDsc,\n          },\n          {\n            label: \"Current Ratio\",\n            value:\n              (financialData?.currentRatio || cachedData.currentRatio) + \"x\",\n            name: \"currentRatio\",\n            description: financialData?.currentRatioDsc,\n          },\n        ];\n\n        const financialsWithDescriptions = await Promise.all(\n          financialsData.map(async (item) => {\n            let description = item.description;\n            if (!description) {\n              const a = await dsc(\n                `summary of ${item.label} of ${cachedData.name} in 20-30 words without the numbers`\n              );\n              data[item.name + \"Dsc\"] = a;\n              description = a;\n            }\n\n            return {\n              ...item,\n              description,\n            };\n          })\n        );\n\n        setFinancialHealth(financialsWithDescriptions);\n      } catch (error) {\n        console.error(\"Error fetching financial health data:\", error);\n        const financialsData = [\n          {\n            label: \"Cash Position\",\n            name: \"cashPosition\",\n            value: \"$\" + cachedData.cashPosition,\n          },\n          {\n            label: \"Total Debt\",\n            name: \"totalDebt\",\n            value: \"$\" + cachedData.totalDebt,\n          },\n          {\n            label: \"Debt to Equity\",\n            name: \"debtToEquity\",\n            value: cachedData.debtToEquity + \"x\",\n          },\n          {\n            label: \"Current Ratio\",\n            name: \"currentRatio\",\n            value: cachedData.currentRatio + \"x\",\n          },\n        ];\n\n        const financialsWithDescriptions = await Promise.all(\n          financialsData.map(async (item) => {\n            const description = await dsc(\n              `summary of ${item.label} of ${cachedData.name} in 20-30 words without the numbers`\n            );\n            data[item.name + \"Dsc\"] = description;\n\n            return {\n              ...item,\n              description,\n            };\n          })\n        );\n\n        setFinancialHealth(financialsWithDescriptions);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, financialHealth: false }));\n      }\n    }\n  }, [cachedData, client]);\n\n  const fetchStrengthsAndCatalysts = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: strengthsData, error } = await client\n          .from(\"company\")\n          .select(\"strengthsAndCatalysts\")\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!strengthsData) {\n          const { data: defaultData, error: defaultError } = await client\n            .from(\"company\")\n            .select(\"strengthsAndCatalysts\")\n            .eq(\"name\", data.name)\n            .single();\n\n          strengthsData = defaultData;\n        }\n\n        if (strengthsData && strengthsData.strengthsAndCatalysts) {\n          setStrengthsAndCatalysts(\n            parsePoints(strengthsData.strengthsAndCatalysts)\n          );\n        } else {\n          const strengthsText = await dsc(\n            `Give me growth catalysts of ${cachedData.name} stock, give me 6 points, with headings, and description not more than 40 words`\n          );\n          setStrengthsAndCatalysts(parsePoints(strengthsText));\n        }\n      } catch (error) {\n        console.error(\"Error fetching strengths and catalysts:\", error);\n        const strengthsText = await dsc(\n          `Give me growth catalysts of ${cachedData.name} stock, give me 6 points, with headings, and description not more than 40 words`\n        );\n        setStrengthsAndCatalysts(parsePoints(strengthsText));\n      } finally {\n        setLoadingStates((prev) => ({\n          ...prev,\n          strengthsAndCatalysts: false,\n        }));\n      }\n    }\n  }, [cachedData, client, data.name, userId]);\n\n  const fetchAnalystHealth = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: analystData, error } = await client\n          .from(\"company\")\n          .select(\n            \"analystRating,analystRatingDsc,numberOfAnalysts,numberOfAnalystsDsc,meanTargetPrice,meanTargetPriceDsc,impliedChange,impliedChangeDsc\"\n          )\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!analystData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\n              \"analystRating,analystRatingDsc,numberOfAnalysts,numberOfAnalystsDsc,meanTargetPrice,meanTargetPriceDsc,impliedChange,impliedChangeDsc\"\n            )\n            .eq(\"name\", data.name)\n            .single();\n\n          analystData = defaultData;\n        }\n\n        console.log(cachedData.impliedChange);\n        const analystInfo = [\n          {\n            label: \"Analyst Rating (1-5)\",\n            value: analystData?.analystRating || cachedData.analystRating,\n            name: \"analystRating\",\n            description: analystData?.analystRatingDsc,\n          },\n          {\n            label: \"Number of Analysts\",\n            value: analystData?.numberOfAnalysts || cachedData.numberOfAnalysts,\n            name: \"numberOfAnalysts\",\n            description: analystData?.numberOfAnalystsDsc,\n          },\n          {\n            label: \"Mean Target Price\",\n            value:\n              \"$\" +\n              roundAndConvert(\n                analystData?.meanTargetPrice || cachedData.meanTargetPrice\n              ),\n            name: \"meanTargetPrice\",\n            description: analystData?.meanTargetPriceDsc,\n          },\n          {\n            label: \"Implied +/-\",\n            value: roundAndConvert(\n              analystData?.impliedChange || cachedData.impliedChange\n            ),\n            name: \"impliedChange\",\n            description: analystData?.impliedChangeDsc,\n          },\n        ];\n\n        const analystDataWithDescriptions = await Promise.all(\n          analystInfo.map(async (item) => {\n            let description = item.description;\n            if (!description) {\n              const a = await dsc(\n                `summary of ${item.label} of ${cachedData.name} in 20-30 words without the numbers`\n              );\n              data[item.name + \"Dsc\"] = a;\n              description = a;\n            }\n\n            return {\n              ...item,\n              description,\n            };\n          })\n        );\n        setAnalystHealth(analystDataWithDescriptions);\n      } catch (error) {\n        console.error(\"Error fetching analyst health:\", error);\n        setAnalystHealth([]);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, analystHealth: false }));\n      }\n    }\n  }, [cachedData, client]);\n\n  const fetchRisksAndMitigations = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: risksData, error } = await client\n          .from(\"company\")\n          .select(\"risksAndMitigation\")\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!risksData) {\n          const { data: defaultData, error: defaultError } = await client\n            .from(\"company\")\n            .select(\"risksAndMitigation\")\n            .eq(\"name\", data.name)\n            .single();\n\n          risksData = defaultData;\n        }\n\n        if (risksData && risksData.risksAndMitigation) {\n          const parsedRisks = parseRisksAndMitigations(\n            risksData.risksAndMitigation\n          );\n          setRisksAndMitigations(parsedRisks);\n          setEditedVals((prev) => ({\n            ...prev,\n            risksAndMitigation: parsePointsToString(parsedRisks),\n          }));\n        } else {\n          const risksText = await dsc(\n            `Give me 6 Risks with explanation and also their mitigations respectively of ${cachedData.name} stock with headings and description of not more than 20 words for each`\n          );\n          const parsedRisks = parseRisksAndMitigations(risksText);\n          setRisksAndMitigations(parsedRisks);\n          setEditedVals((prev) => ({\n            ...prev,\n            risksAndMitigation: parsePointsToString(parsedRisks),\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching risks and mitigations:\", error);\n        const risksText = await dsc(\n          `Give me 6 Risks with explanation and also their mitigations respectively of ${cachedData.name} stock with headings and description of not more than 20 words for each`\n        );\n        setRisksAndMitigations(parseRisksAndMitigations(risksText));\n      } finally {\n        setLoadingStates((prev) => ({\n          ...prev,\n          risksAndMitigations: false,\n        }));\n      }\n    }\n  }, [cachedData, client, data.name, userId]);\n\n  const fetchConclusion = useCallback(async () => {\n    const promptData = {\n      ...cachedData,\n      url1: \"\",\n      url2: \"\",\n    };\n\n    if (cachedData && client) {\n      try {\n        let { data: conclusionData, error } = await client\n          .from(\"company\")\n          .select(\"conclusion\")\n          .eq(\"name\", `${userId}-${data.name}`)\n          .single();\n\n        if (!conclusionData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\"conclusion\")\n            .eq(\"name\", data.name)\n            .single();\n\n          conclusionData = defaultData;\n        }\n\n        if (conclusionData && conclusionData.conclusion) {\n          setConclusion(conclusionData.conclusion);\n          setImageSrc2(\n            data.url2 ||\n              \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          );\n        } else {\n          const conclusionText = await dsc(\n            `With this info ${JSON.stringify(\n              promptData\n            )} give a 70-100 words conclusion which include should we buy it or not?.`\n          );\n          setConclusion(conclusionText);\n          setImageSrc2(\n            data.url2 ||\n              \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          );\n        }\n      } catch (error) {\n        console.error(\"Error fetching conclusion:\", error);\n        const conclusionText = await dsc(\n          `With this info ${JSON.stringify(\n            promptData\n          )} give a 70-100 words conclusion which include should we buy it or not?.`\n        );\n        setConclusion(conclusionText);\n        setImageSrc2(\n          data.url2 ||\n            \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n        );\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, conclusion: false }));\n      }\n    }\n  }, [cachedData, client, data.url2]);\n\n  const fetchHistory = useCallback(async () => {\n    if (client && cachedData && !history) {\n      try {\n        setLoadingStates((prev) => ({ ...prev, history: true }));\n\n        const { data: row, error } = await client\n          .from(\"company\")\n          .select(\n            `\n            revenue24,\n            ebit24,\n            netProfit24,\n            ebitda24,\n            roi24,\n            revenue22,\n            ebit22,\n            netProfit22,\n            ebitda22,\n            roi22,\n            revenue23,\n            ebit23,\n            netProfit23,\n            ebitda23,\n            roi23,\n            revenue21,\n            ebit21,\n            netProfit21,\n            ebitda21,\n            roi21,\n            oneYrDsc`\n          )\n          .eq(\"name\", cachedData.name)\n          .single();\n\n        if (error) throw error;\n\n        const req = { symbol: id };\n        const response = await fetch(\"/api/history\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(req),\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const hD: StockHistory = await response.json();\n\n        const obj: StockHistory = {\n          name: cachedData.name,\n          ticker: cachedData.ticker,\n          revenue24: row?.revenue24 || hD.revenue24,\n          ebit24: row?.ebit24 || hD.ebit24,\n          netProfit24: row?.netProfit24 || hD.netProfit24,\n          ebitda24: row?.ebitda24 || hD.ebitda24,\n          roi24: row?.roi24 || hD.roi24,\n          revenue22: row?.revenue22 || hD.revenue22,\n          ebit22: row?.ebit22 || hD.ebit22,\n          netProfit22: row?.netProfit22 || hD.netProfit22,\n          ebitda22: row?.ebitda22 || hD.ebitda22,\n          roi22: row?.roi22 || hD.roi22,\n          revenue23: row?.revenue23 || hD.revenue23,\n          ebit23: row?.ebit23 || hD.ebit23,\n          netProfit23: row?.netProfit23 || hD.netProfit23,\n          ebitda23: row?.ebitda23 || hD.ebitda23,\n          roi23: row?.roi23 || hD.roi23,\n          revenue21: row?.revenue21 || hD.revenue21,\n          ebit21: row?.ebit21 || hD.ebit21,\n          netProfit21: row?.netProfit21 || hD.netProfit21,\n          ebitda21: row?.ebitda21 || hD.ebitda21,\n          roi21: row?.roi21 || hD.roi21,\n          dsc:\n            row?.oneYrDsc ||\n            (await dsc(\n              `Give 2024 stock price summary of ${cachedData.name} in 40 words`\n            )),\n        };\n\n        setHistory(obj);\n        console.log(obj);\n      } catch (error) {\n        console.error(\"Error fetching history:\", error);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, history: false }));\n      }\n    }\n  }, [cachedData, client, id, history]);\n\n  useEffect(() => {\n    fetchHistory();\n  }, [fetchHistory]);\n\n  async function saveEditedContent() {\n    setIsSaving(true);\n    try {\n      console.log(editedVals.description);\n      const updatedData: TableType = {\n        ...dataSave,\n        ...editedVals,\n        ticker: id,\n        strengthsAndCatalysts:\n          editedVals?.strengthsAndCatalysts ||\n          parsePointsToString(strengthsAndCatalysts),\n        risksAndMitigation:\n          editedVals?.risksAndMitigation ||\n          parsePointsToString(risksAndMitigations),\n        conclusion: editedVals?.conclusion || conclusion,\n        description: editedVals?.description || companyDescription,\n      };\n\n      if (client) {\n        console.log(\"Saving updated data:\", updatedData);\n        const { data: serverData, error } = await client\n          .from(\"company\")\n          .upsert(updatedData)\n          .select();\n\n        if (error) {\n          throw error;\n        }\n\n        console.log(\"Server response:\", serverData);\n        setCachedData(updatedData);\n        setDataSave(updatedData);\n        setEditedVals({}); // Clear editedVals after successful save\n      } else {\n        throw new Error(\"Supabase client is not initialized\");\n      }\n    } catch (error) {\n      console.error(\"Error saving content:\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  }\n\n  async function savePointsStgh(\n    section: string,\n    content: string\n  ): Promise<void> {\n    setIsSaving(true);\n    try {\n      if (client) {\n        const arr = section.split(\"-\");\n        const col = arr[0];\n        const type = arr[1];\n        const index = arr[2];\n\n        const { data: oldData, error } = await client\n          .from(\"company\")\n          .select(\"strengthsAndCatalysts\")\n          .eq(\"name\", data.name)\n          .single();\n\n        const oldVal = oldData?.strengthsAndCatalysts;\n        let newVal: string;\n\n        if (type === \"title\") {\n          newVal =\n            oldVal.slice(0, oldVal.indexOf(index) + 2) +\n            content +\n            oldVal.slice(oldVal.indexOf(\":\", oldVal.indexOf(index) + 2));\n        } else if (type === \"description\") {\n          if (Number(index) < 6) {\n            newVal =\n              oldVal.slice(\n                0,\n                oldVal.indexOf(\":\", oldVal.indexOf(index) + 2) + 1\n              ) +\n              content +\n              oldVal.slice(oldVal.indexOf((Number(index) + 1).toString()) - 1);\n          } else {\n            newVal =\n              oldVal.slice(\n                0,\n                oldVal.indexOf(\":\", oldVal.indexOf(index) + 2) + 1\n              ) + content;\n          }\n        }\n\n        console.log(oldVal, col);\n        console.log(newVal);\n        const updatedData = {\n          ...data,\n          ticker: id,\n          [col]: newVal,\n        };\n\n        if (client) {\n          const { data: serverData, error } = await client\n            .from(\"company\")\n            .upsert(updatedData)\n            .eq(\"name\", data.name)\n            .select();\n\n          if (error) {\n            throw error;\n          }\n\n          setCachedData(updatedData);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving points:\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  }\n\n  async function savePointsRsk(\n    section: string,\n    content: string\n  ): Promise<void> {\n    setIsSaving(true);\n    try {\n      if (client) {\n        const arr = section.split(\"-\");\n        const col = arr[0];\n        const type = arr[1];\n        const index = arr[2];\n\n        const updatedRisks = risksAndMitigations.map((risk, i) => {\n          if (i === Number(index) - 1) {\n            return { ...risk, [type]: content };\n          }\n          return risk;\n        });\n\n        const newVal = parsePointsToString(updatedRisks);\n\n        setRisksAndMitigations(updatedRisks);\n        setEditedVals((prev) => ({ ...prev, risksAndMitigation: newVal }));\n\n        if (client) {\n          const { data: serverData, error } = await client\n            .from(\"company\")\n            .update({ risksAndMitigation: newVal })\n            .eq(\"name\", data.name)\n            .select();\n\n          if (error) {\n            throw error;\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error saving points:\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  }\n\n  // const defaultSave = async () => {\n  //   if (client) {\n  //     const { data: prev, error } = await client\n  //       .from(\"company\")\n  //       .select(\"*\")\n  //       .eq(\"ticker\", id)\n  //       .single();\n\n  //     if (\n  //       !prev &&\n  //       companyDescription &&\n  //       conclusion &&\n  //       strengthsAndCatalysts &&\n  //       risksAndMitigations\n  //     ) {\n  //       const defaultData = {\n  //         ...data,\n  //         ticker: id,\n  //         strengthsAndCatalysts: parsePointsToString(strengthsAndCatalysts),\n  //         risksAndMitigation: parsePointsToString(risksAndMitigations),\n  //         description: companyDescription,\n  //         conclusion: conclusion,\n  //       };\n  //       console.log(defaultData);\n  //       const res = await client?.from(\"company\").insert(defaultData).select();\n  //       console.log(res);\n  //     }\n  //   }\n  // };\n\n  const dsc = useCallback(\n    async (_prompt: string) => {\n      if (calls < 30) {\n        const data = { prompt: _prompt };\n        try {\n          const res = await fetch(\"/api/prompt\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n          const response = await res.text();\n          const obj = JSON.parse(response);\n          setCalls((prevCalls) => prevCalls + 1);\n          return obj.response;\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      }\n    },\n    [calls]\n  );\n\n  useEffect(() => {\n    if (cachedData) {\n      fetchCompanyOverview();\n      fetchKeyMetrics();\n      fetchFinancialHealth();\n      fetchStrengthsAndCatalysts();\n      fetchAnalystHealth();\n      fetchRisksAndMitigations();\n      fetchConclusion();\n    }\n  }, [\n    cachedData,\n    fetchCompanyOverview,\n    fetchKeyMetrics,\n    fetchFinancialHealth,\n    fetchStrengthsAndCatalysts,\n    fetchAnalystHealth,\n    fetchRisksAndMitigations,\n    fetchConclusion,\n  ]);\n\n  useEffect(() => {\n    console.log(\"editedVals updated:\", editedVals);\n  }, [editedVals]);\n\n  useEffect(() => {\n    console.log(\"editedVals updated:\", editedVals);\n  }, [editedVals]);\n\n  if (!cachedData) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"m-0 p-0\">\n      {isSaving && <LoadingOverlay />}\n      <ShareButton userId={userId} id={id} />\n      <Refresh\n        onClick={async () => {\n          if (client) {\n            const { error } = await client\n              .from(\"company\")\n              .delete()\n              .eq(\"name\", data.name);\n            console.log(error);\n          }\n\n          router.refresh();\n          setCachedData(null);\n        }}\n      />\n\n      <div className=\"absolute right-0 top-0 -mt-8\">\n        <SaveButton onClick={saveEditedContent} />\n      </div>\n\n      <div className=\"h-full flex flex-col gap-10 p-10 items-center justify-center bg-slate-900\">\n        {loadingStates.companyOverview ? (\n          <LoadingCard />\n        ) : (\n          <CompanyOverview\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            name={cachedData?.name || \"\"}\n            description={companyDescription}\n            imageSrc={imageSrc}\n          />\n        )}\n        {loadingStates.history ? (\n          <LoadingCard />\n        ) : (\n          <FinancialSnapshot\n            count={count}\n            setCount={setCount}\n            cacheData={history}\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            setEditedVals={setEditedVals}\n            saveEditedContent={saveEditedContent}\n          />\n        )}\n        {loadingStates.keyMetrics ? (\n          <LoadingCard />\n        ) : (\n          <KeyMetrics\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            metrics={keyMetrics}\n          />\n        )}\n        {loadingStates.financialHealth ? (\n          <LoadingCard />\n        ) : (\n          <FinancialHealth\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            financials={financialHealth}\n          />\n        )}\n        {loadingStates.strengthsAndCatalysts ? (\n          <LoadingCard />\n        ) : (\n          <StrengthsAndCatalysts\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            savePoints={savePointsStgh}\n            strengths={strengthsAndCatalysts}\n          />\n        )}\n        {loadingStates.analystHealth ? (\n          <LoadingCard />\n        ) : (\n          <AnalystHealth\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            analystData={analystHealth}\n            nOA={data.numberOfAnalysts}\n          />\n        )}\n        {loadingStates.risksAndMitigations ? (\n          <LoadingCard />\n        ) : (\n          <RisksAnalysis\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            savePoints={savePointsRsk}\n            points={risksAndMitigations}\n          />\n        )}\n        {loadingStates.conclusion ? (\n          <LoadingCard />\n        ) : (\n          <Conclusion\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            description={conclusion}\n            imageSrc={imageSrc2}\n            rec={data.recommendation}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction CompanyOverview({\n  name,\n  description,\n  imageSrc,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n  hasChanged,\n  setHasChanged,\n}: {\n  name: string;\n  description: string;\n  imageSrc: string;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-white border-0 overflow-hidden\">\n      <div className=\"flex flex-col lg:flex-row\">\n        <CardHeader className=\"flex-1 p-4 sm:p-6 md:p-8 lg:p-12 justify-center\">\n          <CardTitle className=\"barlow-bold text-2xl sm:text-3xl md:text-4xl lg:text-5xl pb-3 font-bold text-center lg:text-left\">\n            <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n              {extractName(name)}\n            </span>\n          </CardTitle>\n          <EditableText\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            initialText={description}\n            onSave={(newText) => {\n              setEditedVals((prev) => ({ ...prev, description: newText }));\n            }}\n            className=\"montserrat text-sm sm:text-base md:text-lg lg:text-xl text-white\"\n          />\n          <div className=\"mt-4 sm:mt-6 md:mt-10 md:pt-5 flex items-center\">\n            <div className=\"h-10 w-10 sm:h-12 sm:w-12 md:h-10 md:w-10 lg:h-10 lg:w-10 bg-white rounded-full overflow-hidden\">\n              <img\n                className=\"object-cover w-full h-full\"\n                alt=\"Adrian Saville\"\n              />\n            </div>\n            <h1 className=\"montserrat text-lg sm:text-xl md:text-xl lg:text-xl ml-3\">\n              by Adrian Saville\n            </h1>\n          </div>\n        </CardHeader>\n        <div className=\"w-full lg:w-5/12 h-48 sm:h-56 md:h-64 lg:h-auto relative overflow-hidden\">\n          <img\n            className=\"object-cover w-full h-full\"\n            src={imageSrc || \"/placeholder.svg\"}\n            alt={`${name} visual representation`}\n          />\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nfunction KeyMetrics({\n  hasChanged,\n  setHasChanged,\n  metrics,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n}: {\n  metrics: Array<{\n    label: string;\n    value: string | number;\n    description: string;\n    name: string;\n  }>;\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <CardHeader className=\"p-4 sm:p-6 md:p-8 lg:p-12\">\n        <CardTitle className=\"barlow-bold text-2xl sm:text-3xl font-bold text-center pb-4 sm:pb-6\">\n          <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n            Key Market Metrics: Reflecting Value and Potential\n          </span>\n        </CardTitle>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n          {metrics.map((metric, index) => (\n            <div\n              key={metric.label}\n              className=\"montserrat p-4 sm:p-6 bg-gray-800 rounded-md text-center\"\n            >\n              <EditableText\n                hasChanged={hasChanged}\n                setHasChanged={setHasChanged}\n                initialText={metric.value.toString()}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [metric.name]: newText,\n                  }));\n                }}\n                className=\"text-lg sm:text-xl font-bold\"\n              />\n              <p className=\"text-sm sm:text-base font-semibold mt-2\">\n                {metric.label === \"Market Cap\" && (\n                  <GradientIcon\n                    icon={Coins}\n                    gradientId={`gradient-km-${index}`}\n                  />\n                )}\n                {metric.label === \"Shares Outstanding\" && (\n                  <GradientIcon\n                    icon={Users}\n                    gradientId={`gradient-km-${index}`}\n                  />\n                )}\n                {metric.label === \"Shares Float\" && (\n                  <GradientIcon\n                    icon={Users}\n                    gradientId={`gradient-km-${index}`}\n                  />\n                )}\n                {metric.label === \"P/E\" && (\n                  <GradientIcon\n                    icon={BarChart2}\n                    gradientId={`gradient-km-${index}`}\n                  />\n                )}\n                {metric.label === \"EV/EBITDA\" && (\n                  <GradientIcon\n                    icon={TrendingUp}\n                    gradientId={`gradient-km-${index}`}\n                  />\n                )}\n                {metric.label === \"Dividend Rate\" && (\n                  <GradientIcon\n                    icon={Percent}\n                    gradientId={`gradient-km-${index}`}\n                  />\n                )}\n                {metric.label}\n              </p>\n              <EditableText\n                hasChanged={hasChanged}\n                setHasChanged={setHasChanged}\n                initialText={metric.description}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [metric.name + \"Dsc\"]: newText,\n                  }));\n                }}\n                className=\"text-sm sm:text-base mt-2 text-gray-400\"\n              />\n            </div>\n          ))}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction FinancialHealth({\n  hasChanged,\n  setHasChanged,\n  financials,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n}: {\n  financials: Array<{\n    label: string;\n    value: string | number;\n    description: string;\n    name: string;\n  }>;\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0\">\n      <CardHeader className=\"p-4 sm:p-6 md:p-8 lg:p-12\">\n        <CardTitle className=\"barlow-bold text-2xl sm:text-3xl font-bold text-center pb-4 sm:pb-6\">\n          <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n            Financial Health\n          </span>\n        </CardTitle>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\n          {financials.map((item, index) => (\n            <div\n              key={item.label}\n              className=\"montserrat p-4 sm:p-6 bg-gray-800 rounded-md text-center\"\n            >\n              <EditableText\n                hasChanged={hasChanged}\n                setHasChanged={setHasChanged}\n                initialText={item.value.toString()}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({ ...prev, [item.name]: newText }));\n                }}\n                className=\"text-lg sm:text-xl font-bold\"\n              />\n              <p className=\"text-sm sm:text-base font-semibold mt-2\">\n                {item.label === \"Cash Position\" && (\n                  <GradientIcon\n                    icon={Banknote}\n                    gradientId={`gradient-fh-${index}`}\n                  />\n                )}\n                {item.label === \"Debt to Equity\" && (\n                  <GradientIcon\n                    icon={Scale}\n                    gradientId={`gradient-fh-${index}`}\n                  />\n                )}\n                {item.label === \"Total Debt\" && (\n                  <GradientIcon\n                    icon={Landmark}\n                    gradientId={`gradient-fh-${index}`}\n                  />\n                )}\n                {item.label === \"Current Ratio\" && (\n                  <GradientIcon\n                    icon={Divide}\n                    gradientId={`gradient-fh-${index}`}\n                  />\n                )}\n                {item.label}\n              </p>\n              <EditableText\n                hasChanged={hasChanged}\n                setHasChanged={setHasChanged}\n                initialText={item.description}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [item.name + \"Dsc\"]: newText,\n                  }));\n                }}\n                className=\"text-sm sm:text-base mt-2 text-gray-400\"\n              />\n            </div>\n          ))}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction StrengthsAndCatalysts({\n  hasChanged,\n  setHasChanged,\n  strengths,\n  savePoints,\n}: {\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  strengths: Strength[];\n  savePoints: (a: string, b: string) => Promise<void>;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <CardHeader className=\"p-4 sm:p-6 md:p-8\">\n        <CardTitle className=\"barlow-bold text-2xl sm:text-3xl font-bold text-center\">\n          <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n            Strengths and Catalysts for Continued Success\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pr-4 pl-4 sm:pr-6 sm:pl-6 md:pl-8 md:pr-8 md:pb-8\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n          {strengths.map((strength, index) => (\n            <Card\n              key={index}\n              className=\"montserrat bg-gray-800 border-0 rounded-lg pt-4 sm:pt-6 shadow-md\"\n            >\n              <CardContent className=\"flex items-start space-x-3\">\n                <div className=\"w-full\">\n                  <div className=\"relative\">\n                    <div className=\"w-[4px] h-[15px] absolute left-0 top-1.5 bg-purple-400 rounded-full\"></div>\n                    <CardTitle className=\"pl-3 text-lg font-semibold text-white\">\n                      <EditableText\n                        hasChanged={hasChanged}\n                        setHasChanged={setHasChanged}\n                        initialText={strength.title}\n                        onSave={(newText) =>\n                          savePoints(\n                            `strengthsAndCatalysts-title-${index + 1}`,\n                            newText\n                          )\n                        }\n                        className=\"text-base sm:text-lg font-semibold text-white\"\n                      />\n                    </CardTitle>\n                  </div>\n                  <EditableText\n                    hasChanged={hasChanged}\n                    setHasChanged={setHasChanged}\n                    initialText={strength.description}\n                    onSave={(newText) =>\n                      savePoints(\n                        `strengthsAndCatalysts-description-${index + 1}`,\n                        newText\n                      )\n                    }\n                    className=\"text-base text-gray-300 mt-2\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction GradientIcon({\n  icon: Icon,\n  gradientId,\n}: {\n  icon: typeof User;\n  gradientId: string;\n}) {\n  return (\n    <svg className=\"w-6 h-6 inline-block mr-2\" viewBox=\"0 0 24 24\">\n      <defs>\n        <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"#9333EA\" />\n          <stop offset=\"50%\" stopColor=\"#3B82F6\" />\n          <stop offset=\"100%\" stopColor=\"#6366F1\" />\n        </linearGradient>\n        <mask id={`mask-${gradientId}`}>\n          <Icon color=\"white\" />\n        </mask>\n      </defs>\n      <rect\n        width=\"24\"\n        height=\"24\"\n        fill={`url(#${gradientId})`}\n        mask={`url(#mask-${gradientId})`}\n      />\n    </svg>\n  );\n}\n\nfunction FinancialSnapshot({\n  cacheData,\n  hasChanged,\n  setHasChanged,\n  setEditedVals,\n  count,\n  setCount,\n}: {\n  cacheData: StockHistory | undefined;\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  saveEditedContent: () => void;\n  count: number;\n  setCount: Dispatch<SetStateAction<number>>;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  const financialData = [\n    {\n      year: 2024,\n      revenue: cacheData?.revenue24,\n      ebit: cacheData?.ebit24,\n      netProfit: cacheData?.netProfit24,\n      ebiTda: cacheData?.ebitda24,\n      roi: cacheData?.roi24,\n    },\n    {\n      year: 2023,\n      revenue: cacheData?.revenue23,\n      ebit: cacheData?.ebit23,\n      netProfit: cacheData?.netProfit23,\n      ebiTda: cacheData?.ebitda23,\n      roi: cacheData?.roi23,\n    },\n    {\n      year: 2022,\n      revenue: cacheData?.revenue22,\n      ebit: cacheData?.ebit22,\n      netProfit: cacheData?.netProfit22,\n      ebiTda: cacheData?.ebitda22,\n      roi: cacheData?.roi22,\n    },\n    {\n      year: 2021,\n      revenue: cacheData?.revenue21,\n      ebit: cacheData?.ebit21,\n      netProfit: cacheData?.netProfit21,\n      ebiTda: cacheData?.ebitda21,\n      roi: cacheData?.roi21,\n    },\n  ];\n\n  let data = cacheData?.dsc;\n  console.log(cacheData);\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <CardHeader className=\"p-4 sm:p-6 md:p-8\">\n        <CardTitle className=\"barlow-bold text-2xl sm:text-3xl font-bold text-center\">\n          <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n            Financial Snapshot: Stock's Performance\n          </span>\n        </CardTitle>\n\n        <div className=\"grid pt-5 lg:grid-cols-2 gap-8\">\n          <div className=\"space-y-4\">\n            <h2 className=\"barlow-bold text-xl sm:text-xl font-bold text-center\">\n              <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n                1-Year Stock Price\n              </span>\n            </h2>\n            <EditableText\n              count={count}\n              setCount={setCount}\n              hasChanged={hasChanged}\n              setHasChanged={setHasChanged}\n              initialText={cacheData?.dsc}\n              onSave={(newText) => {\n                setEditedVals((prev) => ({\n                  ...prev,\n                  oneYrDsc: newText,\n                }));\n              }}\n              className=\"\"\n            />\n          </div>\n\n          <div className=\"space-y-4\">\n            <h2 className=\"barlow-bold text-xl sm:text-xl font-bold text-center\">\n              <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n                4-Year Financials\n              </span>\n            </h2>\n            <div className=\"rounded-lg overflow-x-scroll\">\n              <table className=\"w-full\">\n                <thead className=\"bg-zinc-800\">\n                  <tr>\n                    <th className=\"text-gray-100 p-2\">Year</th>\n                    <th className=\"text-gray-100 p-2\">Revenue ($B)</th>\n                    <th className=\"text-gray-100 p-2\">EBIT ($B)</th>\n                    <th className=\"text-gray-100 p-2\">Net Profit</th>\n                    <th className=\"text-gray-100 p-2\">EBITDA ($B)</th>\n                    <th className=\"text-gray-100 p-2\">ROI (%)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {financialData.map((row) => (\n                    <tr key={row.year} className=\"border-zinc-800\">\n                      <td className=\"text-gray-100 text-center p-2\">\n                        {row.year.toString()}\n                      </td>\n                      <td className=\"text-gray-100 p-2\">\n                        <EditableText\n                          hasChanged={hasChanged}\n                          setHasChanged={setHasChanged}\n                          initialText={row.revenue}\n                          onSave={(newText) => {\n                            setEditedVals((prev) => ({\n                              ...prev,\n                              [`revenue${row.year.toString().slice(2)}`]:\n                                newText,\n                            }));\n                          }}\n                          className=\"text-center\"\n                        />\n                      </td>\n                      <td className=\"text-gray-100 p-2\">\n                        <EditableText\n                          hasChanged={hasChanged}\n                          setHasChanged={setHasChanged}\n                          initialText={row.ebit}\n                          onSave={(newText) => {\n                            setEditedVals((prev) => ({\n                              ...prev,\n                              [`revenue${row.year.toString().slice(2)}`]:\n                                newText,\n                            }));\n                          }}\n                          className=\"text-center\"\n                        />\n                      </td>\n                      <td className=\"text-gray-100 p-2\">\n                        <EditableText\n                          hasChanged={hasChanged}\n                          setHasChanged={setHasChanged}\n                          initialText={row.netProfit}\n                          onSave={(newText) => {\n                            setEditedVals((prev) => ({\n                              ...prev,\n                              [`netProfit${row.year.toString().slice(2)}`]:\n                                newText,\n                            }));\n                          }}\n                          className=\"text-center\"\n                        />\n                      </td>\n                      <td className=\"text-gray-100 p-2\">\n                        <EditableText\n                          hasChanged={hasChanged}\n                          setHasChanged={setHasChanged}\n                          initialText={row.ebiTda}\n                          onSave={(newText) => {\n                            setEditedVals((prev) => ({\n                              ...prev,\n                              [`ebiTda${row.year.toString().slice(2)}`]:\n                                newText,\n                            }));\n                          }}\n                          className=\"text-center\"\n                        />\n                      </td>\n                      <td className=\"text-gray-100 p-2\">\n                        <EditableText\n                          hasChanged={hasChanged}\n                          setHasChanged={setHasChanged}\n                          initialText={row.roi}\n                          onSave={(newText) => {\n                            setEditedVals((prev) => ({\n                              ...prev,\n                              [`roi${row.year.toString().slice(2)}`]: newText,\n                            }));\n                          }}\n                          className=\"text-center\"\n                        />\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction AnalystHealth({\n  hasChanged,\n  setHasChanged,\n  analystData,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n  nOA,\n}: {\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  analystData: Array<{\n    label: string;\n    value: string | number;\n    description: string;\n    name: string;\n  }>;\n  saveEditedContent: () => void;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n  editedVals: EditedValType;\n  nOA: number | string;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-lg sm:shadow-xl md:shadow-2xl shadow-cyan-400/20 sm:shadow-cyan-400/30 md:shadow-cyan-400/40 text-gray-100 border-0 overflow-hidden\">\n      <div className=\"flex flex-col\">\n        <div className=\"w-full h-[15vh] sm:h-[15vh] md:h-[20vh] relative overflow-hidden\">\n          <img\n            className=\"object-cover object-bottom w-full h-full\"\n            src=\"https://images.pexels.com/photos/7239279/pexels-photo-7239279.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2\"\n          />\n        </div>\n        <CardHeader className=\"p-4 sm:p-6 md:p-8 lg:p-10\">\n          <CardTitle className=\"barlow-bold text-xl sm:text-2xl md:text-3xl pb-4 sm:pb-6 font-bold text-center\">\n            <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n              Analyst Insights\n            </span>\n          </CardTitle>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-5 md:gap-6\">\n            {analystData\n              .filter((item) => item.label !== \"Number of Analysts\")\n              .map((item, index) => (\n                <div\n                  key={item.label}\n                  className=\"montserrat p-3 sm:p-4 md:p-5 bg-gray-800 rounded-md text-center\"\n                >\n                  <EditableText\n                    hasChanged={hasChanged}\n                    setHasChanged={setHasChanged}\n                    initialText={item.value.toString()}\n                    onSave={(newText) => {\n                      setEditedVals((prev) => ({\n                        ...prev,\n                        [item.name]: newText,\n                      }));\n                    }}\n                    className=\"text-base sm:text-lg md:text-xl font-bold\"\n                  />\n                  <p className=\"text-xs sm:text-sm md:text-base font-semibold mt-2 flex items-center justify-center\">\n                    {item.label === \"Number of Analysts\" && (\n                      <GradientIcon\n                        icon={User}\n                        gradientId={`gradient-ah-${index}`}\n                        // className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1\"\n                      />\n                    )}\n                    {item.label === \"Analyst Rating (1-5)\" && (\n                      <GradientIcon\n                        icon={Star}\n                        gradientId={`gradient-ah-${index}`}\n                        // className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1\"\n                      />\n                    )}\n                    {item.label === \"Mean Target Price\" && (\n                      <GradientIcon\n                        icon={Banknote}\n                        gradientId={`gradient-ah-${index}`}\n                        // className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1\"\n                      />\n                    )}\n                    {item.label === \"Implied +/-\" && (\n                      <GradientIcon\n                        icon={Scale}\n                        gradientId={`gradient-ah-${index}`}\n                        // className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1\"\n                      />\n                    )}\n                    {item.label}\n                  </p>\n\n                  <EditableText\n                    hasChanged={hasChanged}\n                    setHasChanged={setHasChanged}\n                    initialText={item.description}\n                    onSave={(newText) => {\n                      setEditedVals((prev) => ({\n                        ...prev,\n                        [item.name + \"Dsc\"]: newText,\n                      }));\n                    }}\n                    className=\"text-sm sm:text-base mt-2 text-gray-400\"\n                  />\n                  {item.label === \"Analyst Rating (1-5)\" && (\n                    <div className=\"flex justify-center items-center montserrat text-sm mt-2\">\n                      <span className=\"mr-1\">Number of analysts:</span>\n                      <span>{nOA}</span>\n                    </div>\n                  )}\n                </div>\n              ))}\n          </div>\n        </CardHeader>\n      </div>\n    </Card>\n  );\n}\n\nfunction RisksAnalysis({\n  hasChanged,\n  setHasChanged,\n  points,\n  savePoints,\n}: {\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  points: Strength[];\n  savePoints: (a: string, b: string) => void;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <CardHeader className=\"p-4 sm:p-6 md:p-8\">\n        <CardTitle className=\"barlow-bold text-2xl sm:text-3xl font-bold text-center\">\n          <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n            Risks and Mitigations\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pr-4 pl-4 sm:pr-6 sm:pl-6 md:pl-8 md:pr-8 md:pb-8\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n          {points.map((point, index) => (\n            <Card\n              key={index}\n              className=\"montserrat bg-gray-800 border-0 rounded-lg pt-4 sm:pt-6 shadow-md\"\n            >\n              <CardContent className=\"flex items-start space-x-3\">\n                <div className=\"w-full\">\n                  <div className=\"relative\">\n                    <div className=\"w-[4px] h-[15px] absolute left-0 top-1.5 bg-purple-400 rounded-full\"></div>\n                    <CardTitle className=\"pl-3 text-lg font-semibold text-white\">\n                      <EditableText\n                        hasChanged={hasChanged}\n                        setHasChanged={setHasChanged}\n                        initialText={point.title}\n                        onSave={(newText) =>\n                          savePoints(\n                            `risksAndMitigation-${\"title\"}-${index + 1}`,\n                            newText\n                          )\n                        }\n                        className=\"text-base sm:text-lg font-semibold text-white\"\n                      />\n                    </CardTitle>\n                  </div>\n                  <EditableText\n                    hasChanged={hasChanged}\n                    setHasChanged={setHasChanged}\n                    initialText={point.description}\n                    onSave={(newText) =>\n                      savePoints(\n                        `risksAndMitigation-${\"description\"}-${index + 1}`,\n                        newText\n                      )\n                    }\n                    className=\"text-base text-gray-300 mt-2\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction Conclusion({\n  description,\n  hasChanged,\n  setHasChanged,\n  imageSrc,\n  saveEditedContent,\n  rec,\n  setEditedVals,\n  editedVals,\n}: {\n  description: string;\n  imageSrc: string;\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n  rec: string;\n}) {\n  return (\n    <Card className=\"w-full max-w-[80vw] mx-auto bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <div className=\"flex flex-col lg:flex-row\">\n        <div className=\"w-full lg:w-1/3 h-64 lg:h-auto relative overflow-hidden\">\n          <img\n            className=\"object-cover w-full h-full\"\n            src={imageSrc || \"/placeholder.svg\"}\n            alt=\"Conclusion visual\"\n          />\n        </div>\n        <CardHeader className=\"flex-1 p-4 sm:p-6 md:p-8 lg:p-12 items-center justify-center\">\n          <CardTitle className=\"barlow-bold text-3xl sm:text-4xl pb-3 font-bold text-center lg:text-right\">\n            <span className=\"bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 text-transparent bg-clip-text\">\n              Conclusion\n            </span>\n          </CardTitle>\n          <EditableText\n            hasChanged={hasChanged}\n            setHasChanged={setHasChanged}\n            initialText={description}\n            onSave={(newText) => {\n              setEditedVals({ ...editedVals, conclusion: newText });\n            }}\n            className=\"montserrat text-base sm:text-lg lg:text-xl text-center text-white\"\n          />\n          <div className=\"flex flex-col sm:flex-row items-center mt-4 gap-2\">\n            <span className=\" text-white barlow text-xl lg:text-2xl\">\n              Recommendation:\n            </span>\n            <EditableText\n              hasChanged={hasChanged}\n              setHasChanged={setHasChanged}\n              initialText={rec}\n              onSave={(newText) => {\n                setEditedVals({ ...editedVals, recommendation: newText });\n              }}\n              className=\"barlow-bold text-lg sm:text-xl lg:text-2xl\"\n            />\n          </div>\n        </CardHeader>\n      </div>\n    </Card>\n  );\n}\n\nfunction parsePoints(text: string): Strength[] {\n  const strengths: Strength[] = [];\n  const parts = text.split(/\\d+\\./).slice(1);\n\n  for (const part of parts) {\n    const [title, ...descriptionParts] = part.split(\":\");\n    const description = descriptionParts.join(\":\").trim();\n    if (title && description) {\n      strengths.push({\n        title: title.trim(),\n        description: description.replace(/\\.$/, \"\"),\n      });\n    }\n  }\n\n  return strengths;\n}\n\nfunction parseRisksAndMitigations(text: string): Strength[] {\n  const risks: Strength[] = [];\n  const parts = text.split(/\\d+\\./).slice(1);\n\n  for (const part of parts) {\n    const [title, ...descriptionParts] = part.split(\":\");\n    const fullDescription = descriptionParts.join(\":\").trim();\n    const [risk, mitigation] = fullDescription.split(\"Mitigation:\");\n\n    if (title && risk) {\n      risks.push({\n        title: title.trim(),\n        description: `${risk.trim()}\\nMitigation:${\n          mitigation ? mitigation.trim() : \"Not provided\"\n        }`,\n      });\n    }\n  }\n\n  return risks;\n}\n\nfunction LoadingCard() {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 items-center justify-center\">\n      <CardContent>\n        <Loader2 className=\"w-16 h-16 text-blue-500\" />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function ShareButton({ id, userId }: { id: string; userId: string }) {\n  const [isToastVisible, setIsToastVisible] = useState(false);\n\n  const toggleToast = () => {\n    setIsToastVisible(!isToastVisible);\n  };\n\n  return (\n    <div className=\"fixed top-5 right-5 z-50\">\n      <button\n        className=\"text-white transition-all duration-300 hover:scale-110 active:scale-90 bg-black p-4 rounded-full shadow-md shadow-cyan-400\"\n        onClick={toggleToast}\n        aria-label=\"Share\"\n      >\n        <Share className=\"text-white w-6 h-6\" />\n      </button>\n      {isToastVisible && (\n        <Toast viewLink={`https://stock-gen.vercel.app/viewOnlyPpt/${id}`} />\n      )}\n    </div>\n  );\n}\n\nexport function Toast({ viewLink }: { viewLink: string }) {\n  const [viewCopied, setViewCopied] = useState(false);\n  const [editableCopied, setEditableCopied] = useState(false);\n  const viewLinkRef = useRef<HTMLParagraphElement>(null);\n  const editableLinkRef = useRef<HTMLParagraphElement>(null);\n\n  const copyToClipboard = async (\n    text: string,\n    setCopied: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error(\"Failed to copy text: \", err);\n    }\n  };\n\n  return (\n    <div className=\"z-[100] absolute top-16 right-0 bg-slate-800 text-white p-4 rounded-lg shadow-lg w-72\">\n      <h3 className=\"text-2xl font-semibold mb-3\">Share Links</h3>\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between bg-slate-700 rounded p-2\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <Link className=\"w-4 h-4 flex-shrink-0\" />\n            <p ref={viewLinkRef} className=\"truncate text-sm\">\n              {viewLink}\n            </p>\n          </div>\n          <button\n            onClick={() => copyToClipboard(viewLink, setViewCopied)}\n            className=\"ml-2 p-1 hover:bg-slate-600 rounded transition-colors duration-200\"\n            aria-label=\"Copy view link\"\n          >\n            {viewCopied ? (\n              <Check className=\"w-4 h-4 text-green-400\" />\n            ) : (\n              <Copy className=\"w-4 h-4\" />\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LoadingOverlay() {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-4 rounded-lg flex items-center space-x-2\">\n        <Loader2 className=\"text-blue-500\" />\n        <span className=\"text-gray-800\">Saving...</span>\n      </div>\n    </div>\n  );\n}\nfunction roundAndConvert(input: string) {\n  const regex = /^-?([\\d.]+)([%a-zA-Z]*)$/;\n  const match = input.match(regex);\n\n  if (!match) {\n    throw new Error(\"Invalid input format\");\n  }\n\n  const numberPart = Number.parseFloat(match[1]);\n  const unit = match[2];\n\n  const roundedNumber = Math.round(numberPart * 10) / 10;\n\n  if (unit) {\n    return `${roundedNumber}${unit}`;\n  }\n\n  return `${roundedNumber}`;\n}\n\nfunction parsePointsToString(obj: Strength[]) {\n  let str = \"\";\n\n  obj.map((val, i) => {\n    const s =\n      (i + 1).toString() + \". \" + val.title + \": \" + val.description + \"\\n\";\n    str += s;\n  });\n\n  return str;\n}\n\nfunction extractName(input: string) {\n  if (!input) return \"\";\n  const parts = input.split(\"-\");\n  return parts.length > 1 ? parts[1].trim() : input.trim();\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3234, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/app/pptDisplay/%5Bid%5D/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"next/navigation\";\nimport Loading from \"@/components/fancy-dark-loading\";\nimport { StockDataDisplay } from \"@/components/EditableStockData\";\nimport type { StockData } from \"../../types/StockData\";\nimport { createSupabaseClient } from \"@/lib/supaBaseClient\";\nimport { SupabaseClient } from \"@supabase/supabase-js\";\n\nexport default function Page() {\n  const [stockData, setStockData] = useState<StockData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userId, setUserId] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const supabase: SupabaseClient = createSupabaseClient();\n    const loadStockData = async () => {\n      try {\n        setIsLoading(true);\n        const userid = (await supabase.auth.getUser()).data.user?.email;\n        if (userid) setUserId(userid);\n        const fetchStockData = async (id: string) => {\n          const response = await fetch(\"/api/stock\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ ticker: id }),\n          });\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch stock data\");\n          }\n          return await response.json();\n        };\n\n        const data: StockData = await fetchStockData(id);\n\n        const { data: url1, error: err1 } = await supabase\n          .from(\"company\")\n          .select(\"url1\")\n          .eq(\"name\", data.name)\n          .single();\n        const { data: url2, error: err2 } = await supabase\n          .from(\"company\")\n          .select(\"url2\")\n          .eq(\"name\", data.name)\n          .single();\n\n        console.log(url1, url2);\n\n        if (!url1) {\n          data.url1 = await getEncodedImage(await getImage(data.name));\n\n          const { data: d, error } = await supabase\n            .from(\"company\")\n            .update({ url1: data.url1 })\n            .eq(\"name\", data.name);\n          if (error) console.log(\"Image upload error\", error);\n        } else data.url1 = url1.url1;\n\n        if (!url2) {\n          data.url2 = await getEncodedImage(await getImage(data.name));\n\n          const { data: d, error } = await supabase\n            .from(\"company\")\n            .update({ url2: data.url2 })\n            .eq(\"name\", data.name);\n          if (error) console.log(\"Image upload error\", error);\n        } else data.url2 = url2.url2;\n\n        setStockData(data);\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Failed to load stock data\"\n        );\n        console.error(\"Error loading stock data:\", err);\n      }\n      setIsLoading(false);\n    };\n\n    loadStockData();\n  }, [id]);\n\n  if (isLoading) return <Loading />;\n  if (error) return <div className=\"text-red-500\">{error}</div>;\n  if (!stockData) return <div>No data available</div>;\n\n  console.log(stockData);\n\n  return <StockDataDisplay userId={userId} id={id} data={stockData} />;\n}\n\nasync function getImage(_name: string) {\n  const data = { stockName: _name };\n  const res = await fetch(\"/api/image\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  const response = await res.json();\n  return response.imageUrl;\n  return \"https://plus.unsplash.com/premium_photo-1698405316329-fd9c43d7e11c?w=600&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MzN8fG5vcndheXxlbnwwfHwwfHx8MA%3D%3D\";\n}\n\nasync function getEncodedImage(imageUrl: string) {\n  const data = { imageUrl: imageUrl };\n  const res = await fetch(\"/api/extractImage\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  const image = (await res.json()).base64Image;\n\n  return image;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}